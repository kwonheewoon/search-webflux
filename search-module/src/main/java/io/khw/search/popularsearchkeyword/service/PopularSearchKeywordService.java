package io.khw.search.popularsearchkeyword.service;import io.khw.domain.popularsearchkeyword.converter.PopularSearchKeywordConverter;import io.khw.domain.popularsearchkeyword.dto.PopularSearchKeywordApiDto;import io.khw.domain.popularsearchkeyword.entity.PopularSearchKeywordEntity;import io.khw.domain.popularsearchkeyword.repository.PopularSearchKeywordRepository;import lombok.RequiredArgsConstructor;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.dao.DataIntegrityViolationException;import org.springframework.scheduling.annotation.Async;import org.springframework.stereotype.Service;import org.springframework.transaction.TransactionDefinition;import org.springframework.transaction.TransactionStatus;import org.springframework.transaction.annotation.Transactional;import org.springframework.transaction.support.TransactionCallbackWithoutResult;import org.springframework.transaction.support.TransactionTemplate;import java.sql.SQLException;import java.util.List;import java.util.Optional;@Service@RequiredArgsConstructorpublic class PopularSearchKeywordService {    private static Logger logger = LoggerFactory.getLogger(PopularSearchKeywordService.class);    private final PopularSearchKeywordRepository popularSearchKeywordRepository;    private final PopularSearchKeywordConverter popularSearchKeywordConverter;    private final TransactionTemplate transactionTemplate;    /**     * 비동기적으로 검색 키워드의 검색 횟수를 증가시키는 작업을 수행하는 메소드     *     * 1.검색 횟수 증가에 대해 최대 1번의 시도(키워드별 유니크 에러 발생시 재시도)     * 2 각 시도에서 executeTransaction 메소드를 호출하여 트랜잭션을 실행     * 3.트랜잭션 중에 DataIntegrityViolationException이 발생한 경우, handleDataIntegrityViolationException 메소드를 호출하여 오류를 처리     *     * @param searchKeyword 검색 키워드     * @return Retry 객체     */    @Async    public void incrementSearchCount(String searchKeyword) {        final int maxAttempts = 1;        int currentAttempt = 0;        transactionTemplate.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);        while (currentAttempt < maxAttempts) {            currentAttempt++;            try {                executeTransaction(searchKeyword);                break;            } catch (DataIntegrityViolationException e) {                handleDataIntegrityViolationException(e, currentAttempt, maxAttempts);            }        }    }    /**     * transactionTemplate을 사용하여 트랜잭션을 실행하는 작업을 수행하는 메소드     *     * 1.키워드를 기준으로 인기 검색어를 찾으며, 인기 검색어가 존재하지 않는 경우 새로운 인기 검색어를 생성하고 저장     * 2 인기 검색어가 이미 존재하는 경우, 해당 검색어의 검색 횟수를 증가     *     * @param searchKeyword 검색 키워드     */    private void executeTransaction(String searchKeyword) {        transactionTemplate.execute(new TransactionCallbackWithoutResult() {            @Override            protected void doInTransactionWithoutResult(TransactionStatus status) {                Optional<PopularSearchKeywordEntity> findPopularSearchKeyword = popularSearchKeywordRepository.findByKeyword(searchKeyword);                if (!findPopularSearchKeyword.isPresent()) {                    PopularSearchKeywordEntity popularSearchKeyword = PopularSearchKeywordEntity.createPopularSearchKeyWord(searchKeyword, 1);                    popularSearchKeywordRepository.save(popularSearchKeyword);                } else {                    popularSearchKeywordRepository.incrementSearchVolumeByKeyword(searchKeyword);                }            }        });    }    /**     * DataIntegrityViolationException 오류를 처리하는 작업을 수행     *     * 1.오류의 근본 원인이 SQLException이고, SQL 상태가 "23"로 시작하는 경우 (제약 조건 위반), 최대 시도 횟수에 도달했는지 확인     *     * @param ex DataIntegrityViolationException 예외 객체     * @param currentAttempt 최대 재시도 횟수     * @param currentAttempt 현재 재시도 횟수     */    private void handleDataIntegrityViolationException(DataIntegrityViolationException ex, int currentAttempt, int maxAttempts) {        if (ex.getRootCause() instanceof SQLException &&                ((SQLException) ex.getRootCause()).getSQLState().startsWith("23")) {            if (currentAttempt >= maxAttempts) {                logger.error("Maximum attempts exceeded for incrementing search count");            }        } else {            logger.error("인기 검색어 검색 횟수 증가 로직 오류 message : {}", ex.getMessage());        }    }    /**     * 인기검색어 상위 10개 조회     *     * @return 인기검색어 API DTO List 컬렉션으로 변환후 반환     */    @Transactional(readOnly = true)    public List<PopularSearchKeywordApiDto> getTopKeyWords() {        return popularSearchKeywordConverter.convertsToList(popularSearchKeywordRepository.findTop10ByOrderBySearchVolumeDesc());    }}