package io.khw.search.blogsearch.controller;import io.khw.domain.blogsearch.dto.CommonApiResponseDto;import io.khw.domain.blogsearch.vo.SearchVo;import io.khw.domain.common.dto.ResponseApiDto;import io.khw.domain.popularsearchkeyword.dto.PopularSearchKeywordApiDto;import io.khw.search.blogsearch.service.BlogSearchService;import io.khw.search.popularsearchkeyword.service.PopularSearchKeywordService;import io.swagger.v3.oas.annotations.Operation;import io.swagger.v3.oas.annotations.Parameter;import io.swagger.v3.oas.annotations.tags.Tag;import lombok.RequiredArgsConstructor;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestParam;import reactor.core.publisher.Flux;import reactor.core.publisher.Mono;@Tag(name = "BlogSearchRestController", description = "카카오,네이버 블로그 검색 및 인기검색어 조회 API")//@RestController//@RequestMapping("/search")@RequiredArgsConstructorpublic class BlogSearchRestController {    private final BlogSearchService blogSearchService;    private final PopularSearchKeywordService popularSearchKeywordService;    /**     * 카카오, 네이버 블로그 검색 API 호출     *     * 1.WebClient를 이용한 카카오, 네이버 블로그 검색     * 2.검색 Query를 기반으로 인기 검색어 정보 등록 및 검색 횟수 증가     *     * @param query 검색어     * @param sort 정렬 방식     * @param page 페이지 번호     * @param size 표시 개수     */    //@GetMapping("/blog")    @Operation(summary = "카카오, 네이버 블로그 검색 API 호출", description = "카카오, 네이버 블로그 검색 API 호출 및 검색어 횟수 증가")    public Mono<ResponseEntity<CommonApiResponseDto>> searchBlog(@Parameter(description = "검색어") @RequestParam String query,                                                                 @Parameter(description = "정렬기준 : 카카오 API(accuracy(정확도순), recency(최신순)), 네이버 API(sim(정확도순), date(최신순))") @RequestParam String sort,                                                                 @Parameter(description = "페이지 번호") @RequestParam(defaultValue = "1") int page,                                                                 @Parameter(description = "표출 개수") @RequestParam(defaultValue = "10") int size){        return blogSearchService.search(SearchVo.create(query, sort, page, size))                .map(ResponseEntity::ok)                .defaultIfEmpty(ResponseEntity.notFound().build());    }    /**     * 인기검색어 상위 10개 조회     *     * @return 인기검색어 API DTO List 컬렉션 ResponseEntity 로 감싼 후 반환     */    @GetMapping("/blog/top-keywords")    @Operation(summary = "인기검색어 상위 10개 조회", description = "인기검색어 상위 10개 조회 ")    public Mono<ResponseEntity> searchBlogTopKeywords(){        Flux<PopularSearchKeywordApiDto> searchKeywordApiDtos = popularSearchKeywordService.getTopKeyWords();        return searchKeywordApiDtos.collectList()                .map(documents -> new ResponseApiDto<>(documents, documents.size()))                .flatMap(response -> Mono.just(ResponseEntity.ok().body(response)));    }}