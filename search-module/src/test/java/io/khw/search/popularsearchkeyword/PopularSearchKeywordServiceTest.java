package io.khw.search.popularsearchkeyword;import io.khw.domain.popularsearchkeyword.converter.PopularSearchKeywordConverter;import io.khw.domain.popularsearchkeyword.dto.PopularSearchKeywordApiDto;import io.khw.domain.popularsearchkeyword.entity.PopularSearchKeywordEntity;import io.khw.domain.popularsearchkeyword.repository.PopularSearchKeywordRepository;import io.khw.search.popularsearchkeyword.service.PopularSearchKeywordService;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.junit.jupiter.MockitoExtension;import org.springframework.transaction.PlatformTransactionManager;import org.springframework.transaction.support.TransactionTemplate;import java.util.List;import java.util.Optional;import static org.assertj.core.api.Assertions.assertThat;import static org.mockito.Mockito.*;@ExtendWith(MockitoExtension.class)public class PopularSearchKeywordServiceTest {    @Mock    private PopularSearchKeywordRepository popularSearchKeywordRepository;    @Mock    private PopularSearchKeywordConverter popularSearchKeywordConverter;    @Mock    private PlatformTransactionManager transactionManager;    @Mock    private TransactionTemplate transactionTemplate;    @InjectMocks    private PopularSearchKeywordService popularSearchKeywordService;    private String searchKeyword;    private PopularSearchKeywordEntity popularSearchKeywordEntity;    @Test    public void 검색어_저장테스트() {        // Given        String searchKeyword = "testKeyword";        PopularSearchKeywordEntity savedPopularSearchKeywordEntity = PopularSearchKeywordEntity.createPopularSearchKeyWord(searchKeyword, 1);        when(popularSearchKeywordRepository.findByKeyword(searchKeyword)).thenReturn(Optional.empty());        // When        if(popularSearchKeywordRepository.findByKeyword(searchKeyword).isPresent()){            popularSearchKeywordRepository.incrementSearchVolumeByKeyword(searchKeyword);        }else{            popularSearchKeywordRepository.save(savedPopularSearchKeywordEntity);        }        // Then        verify(popularSearchKeywordRepository, times(1)).save(savedPopularSearchKeywordEntity);    }    @Test    public void 검색어의_검색횟수_증가테스트() {        // Given        String searchKeyword = "testKeyword";        PopularSearchKeywordEntity existingKeyword = PopularSearchKeywordEntity.createPopularSearchKeyWord(searchKeyword, 1);        when(popularSearchKeywordRepository.findByKeyword(searchKeyword)).thenReturn(Optional.of(existingKeyword));        // When        if(popularSearchKeywordRepository.findByKeyword(searchKeyword).isPresent()){            popularSearchKeywordRepository.incrementSearchVolumeByKeyword(searchKeyword);        }        // Then        verify(popularSearchKeywordRepository, times(1)).incrementSearchVolumeByKeyword(searchKeyword);    }    @Test    public void 인기검색어_top10_조회테스트() {        // Given        List<PopularSearchKeywordEntity> popularSearchKeywords = List.of(                PopularSearchKeywordEntity.createPopularSearchKeyWord("keyword1", 100),                PopularSearchKeywordEntity.createPopularSearchKeyWord("keyword2", 90),                PopularSearchKeywordEntity.createPopularSearchKeyWord("keyword3", 80)        );        when(popularSearchKeywordRepository.findTop10ByOrderBySearchVolumeDesc()).thenReturn(popularSearchKeywords);        when(popularSearchKeywordConverter.convertsToList(popularSearchKeywords)).thenReturn(                List.of(                        new PopularSearchKeywordApiDto("keyword1", 100),                        new PopularSearchKeywordApiDto("keyword2", 90),                        new PopularSearchKeywordApiDto("keyword3", 80)                )        );        // When        List<PopularSearchKeywordEntity> searchKeywordEntities = popularSearchKeywordRepository.findTop10ByOrderBySearchVolumeDesc();        List<PopularSearchKeywordApiDto> topKeywords = popularSearchKeywordConverter.convertsToList(searchKeywordEntities);        // Then        assertThat(topKeywords).hasSize(3);        assertThat(topKeywords.get(0).getKeyword()).isEqualTo("keyword1");        assertThat(topKeywords.get(0).getSearchVolume()).isEqualTo(100);    }}